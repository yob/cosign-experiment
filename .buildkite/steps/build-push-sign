#!/bin/sh 

set -e

echo "+++ creating signed image"

# append new data to the README to ensure the docker image busts cache and has
# a new layer
echo `date --iso-8601=seconds` > README.md

echo "${GITHUB_TOKEN}" | docker login -u "${GITHUB_USERNAME}" --password-stdin ghcr.io

IMAGE_NAME="ghcr.io/${GITHUB_USERNAME}/cosign-experiment:${BUILDKITE_BUILD_NUMBER}"

# Build **and ** push the new image. At this point it's not signed yet, but we save a local metadata file that contains the
# image digest that we can use to sign the correct image even if the registry is malicious.
#
# Note that we're using `buildx`. The traditional `docker build` command will mutate the image
# digest on push so there's no way build locally and then sign using a trusted digest.
docker buildx build --metadata-file metadata.json --push -t "${IMAGE_NAME}" .

IMAGE_DIGEST=$(cat metadata.json | jq -r '."containerimage.digest"')

echo "+++ fetching OIDC token from Buildkite"

# Now fetch an OIDC token from Buildkite. Audience must be "sigstore", as required by fulcio
# SIGSTORE_ID_TOKEN is a special ENV that cosign looks for. It will use the OIDC token it finds
# there to request a short term x.509 certificate from sigstore/fulcio, and then sign the
# image with it
SIGSTORE_ID_TOKEN="$(buildkite-agent oidc request-token --audience sigstore)"

echo "+++ Signing image with cosign"

# now we can sign! This includes pushing the signature to the registry as well
cosign sign --yes --output-certificate fulcio.crt "${IMAGE_NAME}@${IMAGE_DIGEST}"

echo "+++ examine the certificate"

openssl x509 -in fulcio.crt -text -noout

echo "+++ cosign triangulate"

cosign triangulate  "${IMAGE_NAME}"

echo "+++ cosign verify"

cosign verify "${IMAGE_NAME}" --certificate-identity https://buildkite.com/yob-opensource/cosign-experiment --certificate-oidc-issuer https://agent.buildkite.com
